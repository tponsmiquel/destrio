Estructura General de la Aplicación


La aplicación sigue el patrón de arquitectura Modelo-Vista-Controlador (MVC), donde:


Modelo (model.py): Maneja la lógica de negocio y los datos de la aplicación.

Vista (view.py): Maneja la interfaz de usuario y la presentación de los datos.

Controlador (controller.py): Maneja la lógica de interacción entre la vista y el modelo.


Cómo Funciona la Aplicación


Al iniciar la aplicación, se crean instancias del modelo y la vista.

La vista muestra un calendario para seleccionar un día y una tabla para editar los registros de los clientes.

Al seleccionar un día en el calendario, se determina cuál columna de la tabla es editable.

Al hacer doble clic en una celda de la tabla, se actualiza su valor cíclicamente entre '', 'No' y 'Si'.

Los cambios se guardan en el modelo y se reflejan en la vista.

Al hacer clic en el botón de guardar, los datos actuales se guardan en un archivo CSV.

destrio/
│
├── app.py              # Archivo principal que inicia la aplicación
├── controller.py       # Controlador que maneja la interacción entre el modelo y la vista
├── model.py            # Modelo que maneja la lógica de negocio y los datos
├── view.py             # Vista que maneja la interfaz de usuario
├── clients.txt         # Archivo de texto con la lista de clientes
├── data/               # Directorio donde se guardan los archivos CSV de registros
└── tests/              # Directorio con los archivos de pruebas unitarias
    ├── __init__.py     # Archivo para indicar que tests es un paquete
    ├── test_model.py   # Pruebas unitarias para model.py
    ├── test_view.py    # Pruebas unitarias para view.py
    ├── test_controller.py  # Pruebas unitarias para controller.py
